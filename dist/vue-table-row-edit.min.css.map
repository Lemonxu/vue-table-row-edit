{"version":3,"sources":["webpack:///./src/components/table/table.vue","webpack:///./src/components/table/table-row.vue"],"names":[],"mappings":"AA4SA,6BACA,YAEA,uBACA,sBACA,WACA,SACA,UACA,yBACA,iBACA,cAEA,0BACA,sBACA,YAGA,oDACA,aACA,kBACA,sBAGA,0BACA,yBACA,eACA,mBACA,yBAEA,wBACA,qBACA,cACA,mBACA,eACA,gBACA,yBACA,qBACA,cACA,wBACA,kBACA,sBACA,aACA,SACA,eACA,gBACA,sBACA,yBACA,qBACA,iBACA,eACA,kBAEA,kCACA,WACA,yBACA,qBAEA,kCACA,WACA,yBACA,qBAEA,iCACA,WACA,yBACA,qBAEA,kCACA,WACA,yBACA,qBC/MA,wBACA,kBACA,qBAEA,0BACA,kBAGA,+BACA,iBACA","file":"vue-table-row-edit.min.css","sourcesContent":["<template>\r\n    <section>\r\n        <button v-if=\"add\" size=\"mini\" type=\"primary\" icon=\"el-icon-plus\" @click=\"handleAdd\" class=\"button--primary\">新增</button>\r\n        <table class=\"table-border table__header\">\r\n            <thead>\r\n                <tr>\r\n                    <th v-for=\"(head,index) in store.states.columns\" :key=\"index\" class=\"lemon-cell\" style=\"width:180px\">\r\n                        <label style=\"color:red\" v-if=\"isRequired(head)\">*</label>\r\n                        {{head.label}}\r\n                    </th>\r\n                    <th class=\"lemon-cell\" style=\"width:150px;min-width:150px\">操作</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <slot :data=\"store\" ></slot>\r\n                <tr v-for=\"(row,rowIndex) in data\" :key=\"rowIndex\" @click=\"handleCell(store.states,$event)\" >\r\n                    <td v-for=\"(column,columnIndex) in store.states.columns\"  :key=\"columnIndex\" class=\"lemon-cell\" >\r\n                        <l-table-row :rowIndex=\"rowIndex\" :row=\"row\" :prop=\"column.prop\" v-model=\"row[column.prop]\" :isEdit=\"getIsEdit(rowIndex)\" :rules=\"rules\" :rule=\"rules[column.prop]\" :column=\"column\">\r\n                        </l-table-row>\r\n                    </td>\r\n                    <td class=\"lemon-cell\" >\r\n                        <div v-if=\"editOperater\">\r\n                            <button \r\n                            @click=\"handleEdit(rowIndex,row,$event)\" \r\n                            v-if=\"!getIsEdit(rowIndex)\" \r\n                            class=\"button--primary\">修改</button>\r\n                            <button \r\n                            @click=\"handleDelete(rowIndex,row,$event)\" \r\n                            v-if=\"!getIsEdit(rowIndex)\"\r\n                            class=\"button--danger\">删除</button>\r\n                            <button \r\n                            @click=\"handleSuccess(rowIndex,row,$event)\" \r\n                            v-if=\"getIsEdit(rowIndex)\"\r\n                            class=\"button--success\">完成</button>\r\n                            <button \r\n                            @click=\"handleCancel(rowIndex,row,$event)\" \r\n                            v-if=\"getIsEdit(rowIndex)\"\r\n                            class=\"button--danger\">取消</button>\r\n                        </div>\r\n                        <div v-else>\r\n                            <button \r\n                            @click=\"handleAddCancel(rowIndex,row,$event)\" \r\n                            v-if=\"getIsEdit(rowIndex)\"\r\n                            class=\"button--danger\">取消</button>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n                <tr v-if=\"store.states.data.length==0\">\r\n                    <td :colspan=\"store.states.columns.length+1\">\r\n                        暂无数据\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport TableStore from './table-store'\r\nimport TableRow from './table-row.vue'\r\n\r\nArray.prototype.remove=function(value){\r\n    let index = this.indexOf(value);\r\n    if(index > -1)\r\n    this.splice(index,1)\r\n}\r\n\r\nconst columnStore={}  //在table和table-column进行交互传递\r\n\r\nexport default {\r\n    name:'LTable',\r\n    provide: {\r\n        LTable:columnStore\r\n    },\r\n    components:{\r\n        'l-table-row':TableRow\r\n    },\r\n    props:{\r\n        data:{\r\n            type:Array,\r\n            default:function(){\r\n                return []\r\n            }\r\n        },\r\n        type:{\r\n            type:String,\r\n            default:() => {\r\n                return 'default'\r\n            }\r\n        },\r\n        rules:{\r\n            type:Object,\r\n            default:function(){\r\n                return {}\r\n            }\r\n        },\r\n        editOperater:Boolean,\r\n        add:{\r\n            type:Boolean,\r\n            default:() => {\r\n                return true\r\n            }\r\n        }\r\n    },\r\n    data(){\r\n        const store = new TableStore(this,{\r\n            data:this.data,\r\n        })\r\n        return{\r\n            store,\r\n            editList:[],\r\n            addList:[],\r\n            validateMessage:'',\r\n            copyOldList:[]\r\n        }\r\n    },\r\n    watch:{\r\n        data: {\r\n            immediate: true,\r\n            handler(val,oldVal) {\r\n                this.store.states.data=val;\r\n                this.editList=[];\r\n            }\r\n        },\r\n    },\r\n    computed:{\r\n    },\r\n    methods:{\r\n        getTypeList(){\r\n            if(this.type==\"add\"){\r\n                return this.addList;\r\n            }else if(this.type==\"edit\"){\r\n                return this.editList;\r\n            }else{\r\n                return [...this.addList,...this.editList];\r\n            }\r\n        },\r\n        isRequired(head){\r\n            let required=false;\r\n            let items=this.rules?this.rules[head.prop]:'';\r\n            let headType=items?(Array.isArray(items)?'array':'object'):'';\r\n            switch(headType){\r\n                case 'array':\r\n                if(items)\r\n                    items.map((item) => {\r\n                        if(item.required){\r\n                            required=true;\r\n                            return false;\r\n                        }\r\n                    })\r\n                break;\r\n                case 'object':\r\n                if(items.required) required=true;\r\n                break;\r\n                default:break;\r\n            }\r\n            return required\r\n        },\r\n        getIsEdit(rowIndex){\r\n            let item=this.getTypeList().find((val) => { return val===rowIndex });\r\n            if(typeof item === 'undefined'){\r\n                return false\r\n            }\r\n            return true\r\n        },\r\n        //单行提交事件\r\n        handleSuccess(rowIndex,row,event){\r\n            let itemStates=[];\r\n            this.$emit('validator-'+rowIndex,(validateState) => {\r\n                itemStates.push(validateState);\r\n            });\r\n            let validateState=itemStates.find((item) => { return !item });\r\n            if(validateState==false){\r\n            }else{\r\n                this.$emit('success',row,(state) => {\r\n                    if(state){\r\n                        let editItem=this.editList.find((val) => { return val===rowIndex });\r\n                        if(editItem!=='undefined') this.editList.remove(editItem);\r\n                        let addItem=this.addList.find((val) => { return val===rowIndex });\r\n                        if(addItem!=='undefined') this.addList.remove(addItem);\r\n                        let copyOldItem=this.copyOldList.find((val) => { return val.id===rowIndex });\r\n                        if(copyOldItem){ this.copyOldList.remove(copyOldItem); }\r\n                    }\r\n                });\r\n            }\r\n            event.cancelBubble=true;\r\n        },\r\n        //行内取消事件\r\n        handleCancel(rowIndex,row,event){\r\n            this.$emit('resetValidate-'+rowIndex)\r\n            let editItem=this.editList.find((val) => { return val===rowIndex });\r\n            if(editItem||editItem==0){\r\n                let copyOldItem=this.copyOldList.find((val) => { return val.id===rowIndex });\r\n                if(copyOldItem){\r\n                    Object.assign(row,copyOldItem.row);\r\n                    this.copyOldList.remove(copyOldItem);\r\n                    this.editList.remove(editItem);\r\n                }\r\n            }else{\r\n                let addItem=this.addList.find((val) => { return val===rowIndex });\r\n                if(addItem||addItem==0){\r\n                    this.data.remove(row);\r\n                    this.addList.remove(this.addList[this.addList.length-1]);\r\n                } \r\n            }\r\n        },\r\n        //新增行内取消事件\r\n        handleAddCancel(rowIndex,row,event){\r\n            let addItem=this.addList.find((val) => { return val===rowIndex });\r\n            if(addItem!=='undefined'){\r\n                this.data.remove(row);\r\n                this.addList.remove(this.addList[this.addList.length-1]);\r\n            } \r\n        },\r\n        //行内删除事件\r\n        handleDelete(rowIndex,row,event){\r\n            this.$emit('delete',row,(state) => {\r\n                if(state){\r\n                    this.data.remove(row);\r\n                }\r\n            });\r\n            event.cancelBubble=true;\r\n        },\r\n        //行内编辑事件\r\n        handleEdit(rowIndex,row,event){\r\n            let editItem=this.editList.find((val) => { return val===rowIndex });\r\n            if(!editItem) this.editList.push(rowIndex);\r\n            let copyOldItem=this.copyOldList.find((val) => { return val.id===rowIndex });\r\n            if(!copyOldItem) this.copyOldList.push({id:rowIndex,row:JSON.parse(JSON.stringify(row))});\r\n        },\r\n        //为列绑定当前行\r\n        handleCell(column,row,event){\r\n            this.$set(column,'value',row[column.prop]);\r\n        },\r\n        //表添加事件\r\n        handleAdd(){\r\n            this.$emit('add',(item) => {\r\n                let rowIndex=this.editOperater?this.store.states.data.length-1:this.store.states.data.length;\r\n                let addItem=this.addList.find((val) => { return val===rowIndex });\r\n                if(!addItem) this.addList.push(rowIndex)\r\n            })\r\n        },\r\n        //全部行验证事件\r\n        validate(callback){\r\n            let validatorStates=[];\r\n            this.getTypeList().map((editItem) => {\r\n                let itemStates=[];\r\n                this.$emit('validator-'+editItem,(validateState) => {\r\n                    itemStates.push(validateState)\r\n                })\r\n                let items=itemStates.find((item) => { return !item });\r\n                if(items==false) validatorStates.push(false);\r\n                else validatorStates.push(true);\r\n            });\r\n            let returnValidate=validatorStates.find((item) => { return !item });\r\n            if(returnValidate==false) callback(false)\r\n            else callback(true);\r\n        },\r\n        //全部行验证重置事件\r\n        resetFields(callback){\r\n            let itemList=[];\r\n            this.getTypeList().map((editItem) => {\r\n                this.$emit('resetValidate-'+editItem)\r\n            })\r\n        }\r\n    },\r\n    created(){\r\n        Object.assign(columnStore,this.store);\r\n    },\r\n    mounted(){\r\n        let columns=[];\r\n        this.$children.map((child) => {\r\n            columns.push(child.column);\r\n        })\r\n        this.store.states.columns=columns;\r\n        // this.$parent.$on('validator',(callback) => {\r\n        //     let validatorStates=[];\r\n        //     this.editList.map((editItem) => {\r\n        //         let itemStates=[];\r\n        //         this.$emit('validator-'+editItem,(validateState) => {\r\n        //             itemStates.push(validateState)\r\n        //         })\r\n        //          let items=itemStates.find((item) => { return !item });\r\n        //          if(items==false) validatorStates.push(false);\r\n        //          else validatorStates.push(true);\r\n        //     });\r\n        //     let returnValidate=validatorStates.find((item) => { return !item });\r\n        //     if(returnValidate==false) callback(false)\r\n        //     else callback(true);\r\n        // })\r\n        // this.$parent.$on('resetValidate',(callback) => {\r\n        //     this.editList.map((editItem) => {\r\n        //         this.$emit('resetValidate-'+editItem)\r\n        //     })\r\n        // })\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.lemon-cell{\r\n    height: 1rem;\r\n}\r\ntable {\r\n    border: 1px solid #ccc;\r\n    width: 100%;\r\n    margin:0;\r\n    padding:0;\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n    margin: 0 auto;\r\n  }\r\n   table tr {\r\n    border: 1px solid #ddd;\r\n    padding: 5px;\r\n  }\r\n\r\n  table th, table td {\r\n    padding: 10px;\r\n    text-align: center;\r\n    border: 1px solid #ddd;\r\n  }\r\n\r\n  table th {\r\n    text-transform: uppercase;\r\n    font-size: 14px;\r\n    letter-spacing: 1px;\r\n    background-color: #eef1f6;\r\n  }\r\nbutton{\r\n    display: inline-block;\r\n    line-height: 1;\r\n    white-space: nowrap;\r\n    cursor: pointer;\r\n    background: #fff;\r\n    border: 1px solid #dcdfe6;\r\n    border-color: #dcdfe6;\r\n    color: #606266;\r\n    -webkit-appearance: none;\r\n    text-align: center;\r\n    box-sizing: border-box;\r\n    outline: none;\r\n    margin: 0;\r\n    transition: .1s;\r\n    font-weight: 500;\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    padding: 5px 10px;\r\n    font-size: 14px;\r\n    border-radius: 4px;\r\n}\r\n.button--primary {\r\n    color: #fff;\r\n    background-color: #1885dd;\r\n    border-color: #1885dd;\r\n}\r\n.button--warning {\r\n    color: #fff;\r\n    background-color: #e6a23c;\r\n    border-color: #e6a23c;\r\n}\r\n.button--danger {\r\n    color: #fff;\r\n    background-color: #f56c6c;\r\n    border-color: #f56c6c;\r\n}\r\n.button--success {\r\n    color: #fff;\r\n    background-color: #67c23a;\r\n    border-color: #67c23a;\r\n}\r\n</style>\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/table/table.vue?014156e5","<template>\n    <section>\n        <div  v-if=\"(!isEdit)||(column.onlyShow)\">\n            <label v-if=\"column.propType=='select'&&column.props.labelProp\">{{row[column.props.labelProp]}}</label>\n            <label v-else>{{row[prop]}}</label>\n        </div>\n        <div v-if=\"isEdit&&(!column.onlyShow)\" >\n            <slot :scope=\"row\"></slot>\n            <el-input \n                v-if=\"column.propType=='default'||column.propType=='input'\" \n                v-model=\"row[prop]\" \n                @change=\"handleChange\"\n                size=\"mini\"\n                :class=\"[{\n                    'is-error': validateState === 'error',\n                },\n                validateState==='error'?'error':'success',\n                ]\"\n                :clearable=\"column.clearable\"></el-input>\n            <el-date-picker\n                v-else-if=\"column.propType=='date'\" \n                v-model=\"row[prop]\"\n                @change=\"handleChange\"\n                type=\"date\"\n                placeholder=\"选择日期\"\n                :class=\"[{\n                    'is-error': validateState === 'error',\n                },\n                validateState==='error'?'error':'success',\n                ]\"\n                :clearable=\"column.clearable\"></el-date-picker>\n            <l-input\n                type=\"number\"\n                v-else-if=\"column.propType=='number'\"  \n                v-model.number=\"row[prop]\"\n                @change=\"handleChange\"\n                :controls=\"false\"\n                size=\"mini\"\n                :class=\"[{\n                    'is-error': validateState === 'error',\n                },\n                validateState==='error'?'error':'success',\n                ]\"/>\n            <el-select\n                v-else-if=\"column.propType=='select'\"\n                v-model=\"row[prop]\" \n                size=\"mini\"\n                @change=\"handleChange\"\n                :filterable=\"column.filterable\"\n                :class=\"[{\n                    'is-error': validateState === 'error',\n                },\n                validateState==='error'?'error':'success',\n                ]\" :clearable=\"column.clearable\">\n                    <el-option\n                    v-for=\"item in column.options\"\n                    :key=\"item.value\"\n                    :label=\"item[column.props.label]\"\n                    :value=\"item[column.props.value]\">\n                    </el-option>\n            </el-select>\n            <label style=\"color:red;font-size:smaller\">{{validateMessage}}</label>\n        </div>\n    </section>\n</template>\n\n<script>\nimport AsyncValidator from 'async-validator';\nimport LInput from '../input'\n\n\nexport default {\n    name:'LTableRow',\n    components:{\n        LInput\n    },\n    props:{\n        value:[String,Number],\n        row:[Object],\n        prop:[String],\n        isEdit:{\n            type:Boolean,\n            default:() => {\n                return false\n            }\n        },\n        column:{\n            type:Object,\n            default:() => {\n                return {};\n            }\n        },\n        rowIndex:[Number],\n        rules:{\n            type:Object,\n            default:() => {\n                return {}\n            }\n        },//所有的验证规则\n        rule:[Array,Object],//当前值得验证规则\n    },\n    data(){\n        return{\n            validateMessage:\"\",\n            validateState:''\n        }\n    },\n    watch:{\n        value:{\n            handler: function (val, oldVal) {\n                this.validator();\n            },\n            deep: true\n        }\n    },\n    methods:{\n        validator(){\n            return new Promise((resolve, reject) => {\n                let validate = new AsyncValidator({[this.prop]:this.rule?this.rule:{}});\n                validate.validate({[this.prop]:this.row[this.prop]}, { firstFields: true }, (errors, fields) => {\n                    this.validateState = !errors ? 'success' : 'error';\n                    this.validateMessage = errors ? errors[0].message : '';\n                    this.$emit('message',this.validateMessage);\n                    this.$set(this.column,'message',this.validateMessage);\n                    resolve(errors)  \n                })  \n            })\n        },\n        onFieldBlur(){\n            this.validator();\n        },\n        onFieldChange(){\n            this.validator();\n        },\n        handleChange(value){\n            let item=this.column.options.find((op) => { return op[this.column.props.value] === value})\n            this.$root.Bus.$emit('table-cell-change', {value:value,row:this.row,item})\n        }\n    },\n    mounted(){\n        this.$parent.$on('validator-'+this.rowIndex,(callback)=>{\n            this.validator();\n            if(this.validateState==\"success\"){\n                callback(true);\n            }else{\n                callback(false);\n            }\n        });\n        this.$parent.$on('resetValidate-'+this.rowIndex,(arr)=>{\n            this.validateState=\"\";\n            this.validateMessage=\"\";\n        });\n        if (this.rule) {\n          this.$on('el.form.blur', this.onFieldBlur);\n          this.$on('el.form.change', this.onFieldChange);\n        }\n    },\n    created(){\n    }\n}\n</script>\n\n<style scoped>\n.error{\n    border-radius: 4px;\n    border: 1px solid red;\n}\n.success{\n    border-radius: 4px;\n    /* border: 1px solid #adb0b5; */\n}\n.input_inline{\n    padding: 3px 10px;\n    display: inline-block;\n}\n</style>\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/table/table-row.vue?ef1860dc"],"sourceRoot":""}